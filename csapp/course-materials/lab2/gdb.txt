
warning: /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb is not a directory.
Quit
Quit
Quit
Quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Starting program: /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb 

Breakpoint 1, main (argc=1, argv=0x7fffffffdd58) at bomb.c:37
37	{
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
32	 */
33	
34	FILE *infile;
35	
36	int main(int argc, char *argv[])
37	{
38	    char *input;
39	
40	    /* Note to self: remember to port this bomb to Windows and put a 
41	     * fantastic GUI on it. */
45	    if (argc == 1) {  
46		infile = stdin;
67	    initialize_bomb();
69	    printf("Welcome to my fiendish little bomb. You have 6 phases with\n");
70	    printf("which to blow yourself up. Have a nice day!\n");
73	    input = read_line();             /* Get input                   */
74	    phase_1(input);                  /* Run the phase               */

Breakpoint 2, 0x0000000000400e70 in phase_1 ()
#0  0x0000000000400e70 in phase_1 ()
#1  0x0000000000400db9 in main (argc=<value optimized out>, argv=0x7fffffffdd58) at bomb.c:74
Single stepping until exit from function phase_1,
which has no line number information.

Program exited with code 010.
No frame selected.
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
No breakpoints or watchpoints.
Breakpoint 1 at 0x400e70
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
warning: File "/home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/.gdbinit" auto-loading has been declined by your `auto-load safe-path' set to "/usr/share/gdb/auto-load:/usr/lib/debug:/usr/bin/mono-gdb.py:~/c".
To enable execution of this file add
	add-auto-load-safe-path /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/.gdbinit
line to your configuration file "/home/chenzongzhi/.gdbinit".
To completely disable this security protection add
	set auto-load safe-path /
line to your configuration file "/home/chenzongzhi/.gdbinit".
For more information about this security protection see the
"Auto-loading safe path" section in the GDB manual.  E.g., run from the shell:
	info "(gdb)Auto-loading safe path"
No breakpoints or watchpoints.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400d24 in main at bomb.c:37
2       breakpoint     keep y   0x0000000000400e70 <phase_1>
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400d24 in main at bomb.c:37
2       breakpoint     keep y   0x0000000000400e70 <phase_1>
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
No breakpoints or watchpoints.
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
No breakpoints or watchpoints.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400d24 in main at bomb.c:37
2       breakpoint     keep y   0x0000000000400e70 <phase_1>
The program is not being run.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
warning: File "/home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/.gdbinit" auto-loading has been declined by your `auto-load safe-path' set to "/usr/share/gdb/auto-load:/usr/lib/debug:/usr/bin/mono-gdb.py".
To enable execution of this file add
	add-auto-load-safe-path /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/.gdbinit
line to your configuration file "/home/chenzongzhi/.gdbinit".
To completely disable this security protection add
	set auto-load safe-path /
line to your configuration file "/home/chenzongzhi/.gdbinit".
For more information about this security protection see the
"Auto-loading safe path" section in the GDB manual.  E.g., run from the shell:
	info "(gdb)Auto-loading safe path"
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
No breakpoints or watchpoints.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Starting program: /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb 

Breakpoint 1, main (argc=1, argv=0x7fffffffdd58) at bomb.c:37
37	{
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
45	    if (argc == 1) {  
46		infile = stdin;
67	    initialize_bomb();
69	    printf("Welcome to my fiendish little bomb. You have 6 phases with\n");
70	    printf("which to blow yourself up. Have a nice day!\n");
73	    input = read_line();             /* Get input                   */
74	    phase_1(input);                  /* Run the phase               */

Breakpoint 2, 0x0000000000400e70 in phase_1 ()
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
69	    printf("Welcome to my fiendish little bomb. You have 6 phases with\n");
70	    printf("which to blow yourself up. Have a nice day!\n");
71	
72	    /* Hmm...  Six phases must be more secure than one phase! */
73	    input = read_line();             /* Get input                   */
74	    phase_1(input);                  /* Run the phase               */
75	    phase_defused();                 /* Drat!  They figured it out!
76					      * Let me know how they did it. */
77	    printf("Phase 1 defused. How about the next one?\n");
78	
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
0x0000000000400e79 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
=> 0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
#0  0x0000000000400e79 in phase_1 ()
#1  0x0000000000400db9 in main (argc=<value optimized out>, argv=0x7fffffffdd58) at bomb.c:74
Ambiguous info command "p": probes, proc, program.
	Using the running image of child process 17911.
Program stopped at 0x400e79.
It stopped after being stepped.
#0  0x0000000000400e79 in phase_1 ()
#1  0x0000000000400db9 in main (argc=<value optimized out>, argv=0x7fffffffdd58) at bomb.c:74
Stack level 0, frame at 0x7fffffffdc70:
 rip = 0x400e79 in phase_1; saved rip 0x400db9
 called by frame at 0x7fffffffdc80
 Arglist at 0x7fffffffdc58, args: 
 Locals at 0x7fffffffdc58, Previous frame's sp is 0x7fffffffdc70
 Saved registers:
  rip at 0x7fffffffdc68
A syntax error in expression, near `%rsp'.
$1 = 4198009
$2 = 140737488346208
0x000000000040123d in strings_not_equal ()
Undefined command: "dissa".  Try "help".
Dump of assembler code for function strings_not_equal:
=> 0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x0000000000401242 in strings_not_equal ()
0x0000000000401247 in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
=> 0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x000000000040124c in strings_not_equal ()
$3 = 140737488346456
$4 = 4197440
0x0000000000401250 in strings_not_equal ()
0x0000000000401253 in strings_not_equal ()
0x0000000000401256 in strings_not_equal ()
0x0000000000401221 in string_length ()
Dump of assembler code for function string_length:
=> 0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
   0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
   0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
   0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
0x0000000000401226 in string_length ()
$5 = 6303552
0x0000000000401229 in string_length ()
Dump of assembler code for function string_length:
   0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
=> 0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
   0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
   0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
$6 = 0x602f40
$7 = 6303552
$8 = 11000000010111101000000
0x602f40 <input_strings>:	01100001011000010110000101100001
0x602f40 <input_strings>:	1633771873
0x602f40 <input_strings>:	24929
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x000000000040122b in string_length ()
Dump of assembler code for function string_length:
   0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
   0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
=> 0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
   0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
$9 = 0
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
Dump of assembler code for function string_length:
   0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
   0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
   0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
=> 0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
Undefined command: "finishi".  Try "help".
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
Dump of assembler code for function string_length:
   0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
   0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
   0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
=> 0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 17911] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
#0  0x0000000000400e70 in phase_1 ()
#1  0x0000000000400db9 in main (argc=<value optimized out>, argv=0x7fffffffdd58) at bomb.c:74
28	/* 
29	 * Note to self: Remember to erase this file so my victims will have no
30	 * idea what is going on, and so they will all blow up in a
31	 * spectaculary fiendish explosion. -- Dr. Evil 
32	 */
33	
34	FILE *infile;
35	
36	int main(int argc, char *argv[])
37	{
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400e70 <phase_1>
	breakpoint already hit 1 time
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
=> 0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x401af8 <__dso_handle+496>:	83
0x401af8 <__dso_handle+496>:	83	99
0x401af8 <__dso_handle+496>:	 "Science isn't about why, it's about why not?"
0x0000000000400e79 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
=> 0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e7e in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
=> 0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x401af8 <__dso_handle+496>:	 U"\x65696353\x2065636e\x276e7369\x62612074\x2074756f\x2c796877\x27746920\x62612073\x2074756f\x20796877\x3f746f6e"
0x401af8 <__dso_handle+496>:	 "Science isn't about why, it's about why not?"
0x0000000000400e80 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
=> 0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x1:	 <Address 0x1 out of bounds>
0xffffffffffffdd58:	 <Address 0xffffffffffffdd58 out of bounds>
0x401af8 <__dso_handle+496>:	 U"\x65696353\x2065636e\x276e7369\x62612074\x2074756f\x2c796877\x27746920\x62612073\x2074756f\x20796877\x3f746f6e"
0x401af8 <__dso_handle+496>:	 "Science isn't about why, it's about why not?"
0x0000000000400e82 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
=> 0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.

Program exited with code 010.
quit
"/home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/defuser.txt": not in executable format: File format not recognized
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
.gdbinit:2: Error in sourced command file:
No executable file specified.
Use the "file" or "exec-file" command.
Quit
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
0x0000000000400e79 in phase_1 ()
0x0000000000400e7e in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
=> 0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 4265] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
=> 0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e79 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
=> 0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
Undefined command: "setpi".  Try "help".
0x000000000040123d in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
=> 0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x0000000000401242 in strings_not_equal ()
0x0000000000401247 in strings_not_equal ()
0x000000000040124c in strings_not_equal ()
0x0000000000401250 in strings_not_equal ()
0x0000000000401253 in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
=> 0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x602f40 <input_strings>:	 "aaaaa"
0x401af8 <__dso_handle+496>:	 "Science isn't about why, it's about why not?"
quit
A debugging session is active.

	Inferior 1 [process 4322] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Single stepping until exit from function phase_1,
which has no line number information.
main (argc=<value optimized out>, argv=0x7fffffffdd48) at bomb.c:75
75	    phase_defused();                 /* Drat!  They figured it out!
77	    printf("Phase 1 defused. How about the next one?\n");
quit
A debugging session is active.

	Inferior 1 [process 5598] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
0x0000000000400e79 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
=> 0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
Undefined command: "setpi".  Try "help".
0x000000000040123d in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
=> 0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x0000000000401242 in strings_not_equal ()
0x0000000000401247 in strings_not_equal ()
0x000000000040124c in strings_not_equal ()
0x0000000000401250 in strings_not_equal ()
0x0000000000401253 in strings_not_equal ()
0x0000000000401256 in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
=> 0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x000000000040125b in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
=> 0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x2c:	 <Address 0x2c out of bounds>
0x400c40 <_start>:	 "1\355I\211\321^H\211\342H\203\344\360PTI\307\300\220\030@"
0x400c40 <_start>:	 U"\x8949ed31\x89485ed1\xe48348e2\x495450f0\x1890c0c7\xc7480040\x401800c1\xc7c74800\x400d24\xfffe77e8\x9090f4ff\x8ec8348\x1058b48\x48002018\x274c085\x8348d0ff\x90c308c4\x90909090\x90909090\x90909090\xe5894855\xec834853\xb83d8008‟\xd8bb4b75\x48006022\x1fb2058b\x81480020\x6022d0eb\xfbc14800\xeb834803\xd8394801\xf662473䐟\x1c08348\x8d058948\xff00201f\x22d0c514\x8b480060\x201f7f05\xd8394800\x5c6e272\x201f6b\xc4834801\xc35d5b08\x2e666666\x841f0f"
0x400c40 <_start>:	 "1\355I\211\321^H\211\342H\203\344\360PTI\307\300\220\030@"
quit
A debugging session is active.

	Inferior 1 [process 5617] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e8c

Breakpoint 1, 0x0000000000400e8c in phase_2 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_2:
=> 0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400e91 in phase_2 ()
0x0000000000400e96 in phase_2 ()
0x7fffffffdd48:	 "\354\337\377\377\377\177"
0x7fffffffdd48:	 "\354\337\377\377\377\177"
0x7fffffffdd48:	 U"\xffffdfec翿\xffffe030翿"
0x7fffffffdd48:	 u"\xdfec\xffff翿"
warning: Unable to display strings with size 'g', using 'b' instead.
0x7fffffffdd48:	 "\354\337\377\377\377\177"
0x7fffffffdd48:	 "\354\337\377\377\377\177"
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
=> 0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400e9b in phase_2 ()
0x0000000000400ea0 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
=> 0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x7fffffffdc58:	 "\325\r@"
0x0000000000400ea4 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
=> 0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x602f90 <input_strings+80>:	 "aaa"
0x0000000000400ea7 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
=> 0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.

Program exited with code 010.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e8c

Breakpoint 1, 0x0000000000400e8c in phase_2 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_2:
=> 0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400ea4 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
=> 0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400ea7 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
=> 0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
Undefined command: "setpi".  Try "help".
0x0000000000401743 in read_six_numbers ()
Dump of assembler code for function read_six_numbers:
=> 0x0000000000401743 <+0>:	sub    $0x18,%rsp
   0x0000000000401747 <+4>:	mov    %rsi,%rdx
   0x000000000040174a <+7>:	lea    0x4(%rsi),%rcx
   0x000000000040174e <+11>:	lea    0x14(%rsi),%rax
   0x0000000000401752 <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401757 <+20>:	lea    0x10(%rsi),%rax
   0x000000000040175b <+24>:	mov    %rax,(%rsp)
   0x000000000040175f <+28>:	lea    0xc(%rsi),%r9
   0x0000000000401763 <+32>:	lea    0x8(%rsi),%r8
   0x0000000000401767 <+36>:	mov    $0x401eb2,%esi
   0x000000000040176c <+41>:	mov    $0x0,%eax
   0x0000000000401771 <+46>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000401776 <+51>:	cmp    $0x5,%eax
   0x0000000000401779 <+54>:	jg     0x401780 <read_six_numbers+61>
   0x000000000040177b <+56>:	callq  0x40163d <explode_bomb>
   0x0000000000401780 <+61>:	add    $0x18,%rsp
   0x0000000000401784 <+65>:	retq   
End of assembler dump.
