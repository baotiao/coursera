
warning: /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb is not a directory.
Quit
Quit
Quit
Quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Starting program: /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb 

Breakpoint 1, main (argc=1, argv=0x7fffffffdd58) at bomb.c:37
37	{
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
32	 */
33	
34	FILE *infile;
35	
36	int main(int argc, char *argv[])
37	{
38	    char *input;
39	
40	    /* Note to self: remember to port this bomb to Windows and put a 
41	     * fantastic GUI on it. */
45	    if (argc == 1) {  
46		infile = stdin;
67	    initialize_bomb();
69	    printf("Welcome to my fiendish little bomb. You have 6 phases with\n");
70	    printf("which to blow yourself up. Have a nice day!\n");
73	    input = read_line();             /* Get input                   */
74	    phase_1(input);                  /* Run the phase               */

Breakpoint 2, 0x0000000000400e70 in phase_1 ()
#0  0x0000000000400e70 in phase_1 ()
#1  0x0000000000400db9 in main (argc=<value optimized out>, argv=0x7fffffffdd58) at bomb.c:74
Single stepping until exit from function phase_1,
which has no line number information.

Program exited with code 010.
No frame selected.
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
No breakpoints or watchpoints.
Breakpoint 1 at 0x400e70
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
warning: File "/home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/.gdbinit" auto-loading has been declined by your `auto-load safe-path' set to "/usr/share/gdb/auto-load:/usr/lib/debug:/usr/bin/mono-gdb.py:~/c".
To enable execution of this file add
	add-auto-load-safe-path /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/.gdbinit
line to your configuration file "/home/chenzongzhi/.gdbinit".
To completely disable this security protection add
	set auto-load safe-path /
line to your configuration file "/home/chenzongzhi/.gdbinit".
For more information about this security protection see the
"Auto-loading safe path" section in the GDB manual.  E.g., run from the shell:
	info "(gdb)Auto-loading safe path"
No breakpoints or watchpoints.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400d24 in main at bomb.c:37
2       breakpoint     keep y   0x0000000000400e70 <phase_1>
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400d24 in main at bomb.c:37
2       breakpoint     keep y   0x0000000000400e70 <phase_1>
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
No breakpoints or watchpoints.
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
No breakpoints or watchpoints.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400d24 in main at bomb.c:37
2       breakpoint     keep y   0x0000000000400e70 <phase_1>
The program is not being run.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
warning: File "/home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/.gdbinit" auto-loading has been declined by your `auto-load safe-path' set to "/usr/share/gdb/auto-load:/usr/lib/debug:/usr/bin/mono-gdb.py".
To enable execution of this file add
	add-auto-load-safe-path /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/.gdbinit
line to your configuration file "/home/chenzongzhi/.gdbinit".
To completely disable this security protection add
	set auto-load safe-path /
line to your configuration file "/home/chenzongzhi/.gdbinit".
For more information about this security protection see the
"Auto-loading safe path" section in the GDB manual.  E.g., run from the shell:
	info "(gdb)Auto-loading safe path"
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
quit
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
No breakpoints or watchpoints.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400d24: file bomb.c, line 37.
Breakpoint 2 at 0x400e70
Starting program: /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb 

Breakpoint 1, main (argc=1, argv=0x7fffffffdd58) at bomb.c:37
37	{
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
45	    if (argc == 1) {  
46		infile = stdin;
67	    initialize_bomb();
69	    printf("Welcome to my fiendish little bomb. You have 6 phases with\n");
70	    printf("which to blow yourself up. Have a nice day!\n");
73	    input = read_line();             /* Get input                   */
74	    phase_1(input);                  /* Run the phase               */

Breakpoint 2, 0x0000000000400e70 in phase_1 ()
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
69	    printf("Welcome to my fiendish little bomb. You have 6 phases with\n");
70	    printf("which to blow yourself up. Have a nice day!\n");
71	
72	    /* Hmm...  Six phases must be more secure than one phase! */
73	    input = read_line();             /* Get input                   */
74	    phase_1(input);                  /* Run the phase               */
75	    phase_defused();                 /* Drat!  They figured it out!
76					      * Let me know how they did it. */
77	    printf("Phase 1 defused. How about the next one?\n");
78	
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
0x0000000000400e79 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
=> 0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
#0  0x0000000000400e79 in phase_1 ()
#1  0x0000000000400db9 in main (argc=<value optimized out>, argv=0x7fffffffdd58) at bomb.c:74
Ambiguous info command "p": probes, proc, program.
	Using the running image of child process 17911.
Program stopped at 0x400e79.
It stopped after being stepped.
#0  0x0000000000400e79 in phase_1 ()
#1  0x0000000000400db9 in main (argc=<value optimized out>, argv=0x7fffffffdd58) at bomb.c:74
Stack level 0, frame at 0x7fffffffdc70:
 rip = 0x400e79 in phase_1; saved rip 0x400db9
 called by frame at 0x7fffffffdc80
 Arglist at 0x7fffffffdc58, args: 
 Locals at 0x7fffffffdc58, Previous frame's sp is 0x7fffffffdc70
 Saved registers:
  rip at 0x7fffffffdc68
A syntax error in expression, near `%rsp'.
$1 = 4198009
$2 = 140737488346208
0x000000000040123d in strings_not_equal ()
Undefined command: "dissa".  Try "help".
Dump of assembler code for function strings_not_equal:
=> 0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x0000000000401242 in strings_not_equal ()
0x0000000000401247 in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
=> 0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x000000000040124c in strings_not_equal ()
$3 = 140737488346456
$4 = 4197440
0x0000000000401250 in strings_not_equal ()
0x0000000000401253 in strings_not_equal ()
0x0000000000401256 in strings_not_equal ()
0x0000000000401221 in string_length ()
Dump of assembler code for function string_length:
=> 0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
   0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
   0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
   0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
0x0000000000401226 in string_length ()
$5 = 6303552
0x0000000000401229 in string_length ()
Dump of assembler code for function string_length:
   0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
=> 0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
   0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
   0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
$6 = 0x602f40
$7 = 6303552
$8 = 11000000010111101000000
0x602f40 <input_strings>:	01100001011000010110000101100001
0x602f40 <input_strings>:	1633771873
0x602f40 <input_strings>:	24929
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x000000000040122b in string_length ()
Dump of assembler code for function string_length:
   0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
   0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
=> 0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
   0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
$9 = 0
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
Dump of assembler code for function string_length:
   0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
   0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
   0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
=> 0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
Undefined command: "finishi".  Try "help".
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
0x0000000000401234 in string_length ()
0x0000000000401236 in string_length ()
0x0000000000401239 in string_length ()
0x000000000040122e in string_length ()
0x0000000000401232 in string_length ()
Dump of assembler code for function string_length:
   0x0000000000401221 <+0>:	mov    $0x0,%eax
   0x0000000000401226 <+5>:	cmpb   $0x0,(%rdi)
   0x0000000000401229 <+8>:	je     0x40123b <string_length+26>
   0x000000000040122b <+10>:	mov    %rdi,%rdx
   0x000000000040122e <+13>:	add    $0x1,%rdx
=> 0x0000000000401232 <+17>:	mov    %edx,%eax
   0x0000000000401234 <+19>:	sub    %edi,%eax
   0x0000000000401236 <+21>:	cmpb   $0x0,(%rdx)
   0x0000000000401239 <+24>:	jne    0x40122e <string_length+13>
   0x000000000040123b <+26>:	repz retq 
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 17911] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
#0  0x0000000000400e70 in phase_1 ()
#1  0x0000000000400db9 in main (argc=<value optimized out>, argv=0x7fffffffdd58) at bomb.c:74
28	/* 
29	 * Note to self: Remember to erase this file so my victims will have no
30	 * idea what is going on, and so they will all blow up in a
31	 * spectaculary fiendish explosion. -- Dr. Evil 
32	 */
33	
34	FILE *infile;
35	
36	int main(int argc, char *argv[])
37	{
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400e70 <phase_1>
	breakpoint already hit 1 time
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
=> 0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x401af8 <__dso_handle+496>:	83
0x401af8 <__dso_handle+496>:	83	99
0x401af8 <__dso_handle+496>:	 "Science isn't about why, it's about why not?"
0x0000000000400e79 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
=> 0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e7e in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
=> 0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x401af8 <__dso_handle+496>:	 U"\x65696353\x2065636e\x276e7369\x62612074\x2074756f\x2c796877\x27746920\x62612073\x2074756f\x20796877\x3f746f6e"
0x401af8 <__dso_handle+496>:	 "Science isn't about why, it's about why not?"
0x0000000000400e80 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
=> 0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x1:	 <Address 0x1 out of bounds>
0xffffffffffffdd58:	 <Address 0xffffffffffffdd58 out of bounds>
0x401af8 <__dso_handle+496>:	 U"\x65696353\x2065636e\x276e7369\x62612074\x2074756f\x2c796877\x27746920\x62612073\x2074756f\x20796877\x3f746f6e"
0x401af8 <__dso_handle+496>:	 "Science isn't about why, it's about why not?"
0x0000000000400e82 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
=> 0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.

Program exited with code 010.
quit
"/home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/defuser.txt": not in executable format: File format not recognized
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
.gdbinit:2: Error in sourced command file:
No executable file specified.
Use the "file" or "exec-file" command.
Quit
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
0x0000000000400e79 in phase_1 ()
0x0000000000400e7e in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
=> 0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 4265] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
=> 0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e79 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
=> 0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
Undefined command: "setpi".  Try "help".
0x000000000040123d in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
=> 0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x0000000000401242 in strings_not_equal ()
0x0000000000401247 in strings_not_equal ()
0x000000000040124c in strings_not_equal ()
0x0000000000401250 in strings_not_equal ()
0x0000000000401253 in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
=> 0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x602f40 <input_strings>:	 "aaaaa"
0x401af8 <__dso_handle+496>:	 "Science isn't about why, it's about why not?"
quit
A debugging session is active.

	Inferior 1 [process 4322] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Single stepping until exit from function phase_1,
which has no line number information.
main (argc=<value optimized out>, argv=0x7fffffffdd48) at bomb.c:75
75	    phase_defused();                 /* Drat!  They figured it out!
77	    printf("Phase 1 defused. How about the next one?\n");
quit
A debugging session is active.

	Inferior 1 [process 5598] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e70

Breakpoint 1, 0x0000000000400e70 in phase_1 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_1:
=> 0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
   0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
0x0000000000400e74 in phase_1 ()
0x0000000000400e79 in phase_1 ()
Dump of assembler code for function phase_1:
   0x0000000000400e70 <+0>:	sub    $0x8,%rsp
   0x0000000000400e74 <+4>:	mov    $0x401af8,%esi
=> 0x0000000000400e79 <+9>:	callq  0x40123d <strings_not_equal>
   0x0000000000400e7e <+14>:	test   %eax,%eax
   0x0000000000400e80 <+16>:	je     0x400e87 <phase_1+23>
   0x0000000000400e82 <+18>:	callq  0x40163d <explode_bomb>
   0x0000000000400e87 <+23>:	add    $0x8,%rsp
   0x0000000000400e8b <+27>:	retq   
End of assembler dump.
Undefined command: "setpi".  Try "help".
0x000000000040123d in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
=> 0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x0000000000401242 in strings_not_equal ()
0x0000000000401247 in strings_not_equal ()
0x000000000040124c in strings_not_equal ()
0x0000000000401250 in strings_not_equal ()
0x0000000000401253 in strings_not_equal ()
0x0000000000401256 in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
=> 0x0000000000401256 <+25>:	callq  0x401221 <string_length>
   0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x000000000040125b in strings_not_equal ()
Dump of assembler code for function strings_not_equal:
   0x000000000040123d <+0>:	mov    %rbx,-0x18(%rsp)
   0x0000000000401242 <+5>:	mov    %rbp,-0x10(%rsp)
   0x0000000000401247 <+10>:	mov    %r12,-0x8(%rsp)
   0x000000000040124c <+15>:	sub    $0x18,%rsp
   0x0000000000401250 <+19>:	mov    %rdi,%rbx
   0x0000000000401253 <+22>:	mov    %rsi,%rbp
   0x0000000000401256 <+25>:	callq  0x401221 <string_length>
=> 0x000000000040125b <+30>:	mov    %eax,%r12d
   0x000000000040125e <+33>:	mov    %rbp,%rdi
   0x0000000000401261 <+36>:	callq  0x401221 <string_length>
   0x0000000000401266 <+41>:	mov    $0x1,%edx
   0x000000000040126b <+46>:	cmp    %eax,%r12d
   0x000000000040126e <+49>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401270 <+51>:	movzbl (%rbx),%eax
   0x0000000000401273 <+54>:	mov    $0x0,%dl
   0x0000000000401275 <+56>:	test   %al,%al
   0x0000000000401277 <+58>:	je     0x4012a6 <strings_not_equal+105>
   0x0000000000401279 <+60>:	mov    $0x1,%dl
   0x000000000040127b <+62>:	cmp    0x0(%rbp),%al
   0x000000000040127e <+65>:	jne    0x4012a6 <strings_not_equal+105>
   0x0000000000401280 <+67>:	mov    $0x0,%eax
   0x0000000000401285 <+72>:	jmp    0x401291 <strings_not_equal+84>
   0x0000000000401287 <+74>:	add    $0x1,%rax
   0x000000000040128b <+78>:	cmp    0x0(%rbp,%rax,1),%dl
   0x000000000040128f <+82>:	jne    0x4012a1 <strings_not_equal+100>
   0x0000000000401291 <+84>:	movzbl 0x1(%rbx,%rax,1),%edx
   0x0000000000401296 <+89>:	test   %dl,%dl
   0x0000000000401298 <+91>:	jne    0x401287 <strings_not_equal+74>
   0x000000000040129a <+93>:	mov    $0x0,%edx
   0x000000000040129f <+98>:	jmp    0x4012a6 <strings_not_equal+105>
   0x00000000004012a1 <+100>:	mov    $0x1,%edx
   0x00000000004012a6 <+105>:	mov    %edx,%eax
   0x00000000004012a8 <+107>:	mov    (%rsp),%rbx
   0x00000000004012ac <+111>:	mov    0x8(%rsp),%rbp
   0x00000000004012b1 <+116>:	mov    0x10(%rsp),%r12
   0x00000000004012b6 <+121>:	add    $0x18,%rsp
   0x00000000004012ba <+125>:	retq   
End of assembler dump.
0x2c:	 <Address 0x2c out of bounds>
0x400c40 <_start>:	 "1\355I\211\321^H\211\342H\203\344\360PTI\307\300\220\030@"
0x400c40 <_start>:	 U"\x8949ed31\x89485ed1\xe48348e2\x495450f0\x1890c0c7\xc7480040\x401800c1\xc7c74800\x400d24\xfffe77e8\x9090f4ff\x8ec8348\x1058b48\x48002018\x274c085\x8348d0ff\x90c308c4\x90909090\x90909090\x90909090\xe5894855\xec834853\xb83d8008‟\xd8bb4b75\x48006022\x1fb2058b\x81480020\x6022d0eb\xfbc14800\xeb834803\xd8394801\xf662473䐟\x1c08348\x8d058948\xff00201f\x22d0c514\x8b480060\x201f7f05\xd8394800\x5c6e272\x201f6b\xc4834801\xc35d5b08\x2e666666\x841f0f"
0x400c40 <_start>:	 "1\355I\211\321^H\211\342H\203\344\360PTI\307\300\220\030@"
quit
A debugging session is active.

	Inferior 1 [process 5617] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e8c

Breakpoint 1, 0x0000000000400e8c in phase_2 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_2:
=> 0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400e91 in phase_2 ()
0x0000000000400e96 in phase_2 ()
0x7fffffffdd48:	 "\354\337\377\377\377\177"
0x7fffffffdd48:	 "\354\337\377\377\377\177"
0x7fffffffdd48:	 U"\xffffdfec翿\xffffe030翿"
0x7fffffffdd48:	 u"\xdfec\xffff翿"
warning: Unable to display strings with size 'g', using 'b' instead.
0x7fffffffdd48:	 "\354\337\377\377\377\177"
0x7fffffffdd48:	 "\354\337\377\377\377\177"
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
=> 0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400e9b in phase_2 ()
0x0000000000400ea0 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
=> 0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x7fffffffdc58:	 "\325\r@"
0x0000000000400ea4 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
=> 0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x602f90 <input_strings+80>:	 "aaa"
0x0000000000400ea7 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
=> 0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.

Program exited with code 010.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e8c

Breakpoint 1, 0x0000000000400e8c in phase_2 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_2:
=> 0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400ea4 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
=> 0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400ea7 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
=> 0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
Undefined command: "setpi".  Try "help".
0x0000000000401743 in read_six_numbers ()
Dump of assembler code for function read_six_numbers:
=> 0x0000000000401743 <+0>:	sub    $0x18,%rsp
   0x0000000000401747 <+4>:	mov    %rsi,%rdx
   0x000000000040174a <+7>:	lea    0x4(%rsi),%rcx
   0x000000000040174e <+11>:	lea    0x14(%rsi),%rax
   0x0000000000401752 <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401757 <+20>:	lea    0x10(%rsi),%rax
   0x000000000040175b <+24>:	mov    %rax,(%rsp)
   0x000000000040175f <+28>:	lea    0xc(%rsi),%r9
   0x0000000000401763 <+32>:	lea    0x8(%rsi),%r8
   0x0000000000401767 <+36>:	mov    $0x401eb2,%esi
   0x000000000040176c <+41>:	mov    $0x0,%eax
   0x0000000000401771 <+46>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000401776 <+51>:	cmp    $0x5,%eax
   0x0000000000401779 <+54>:	jg     0x401780 <read_six_numbers+61>
   0x000000000040177b <+56>:	callq  0x40163d <explode_bomb>
   0x0000000000401780 <+61>:	add    $0x18,%rsp
   0x0000000000401784 <+65>:	retq   
End of assembler dump.
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400e8c

Breakpoint 1, 0x0000000000400e8c in phase_2 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_2:
=> 0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
   0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400ea4 in phase_2 ()
Dump of assembler code for function phase_2:
   0x0000000000400e8c <+0>:	mov    %rbx,-0x20(%rsp)
   0x0000000000400e91 <+5>:	mov    %rbp,-0x18(%rsp)
   0x0000000000400e96 <+10>:	mov    %r12,-0x10(%rsp)
   0x0000000000400e9b <+15>:	mov    %r13,-0x8(%rsp)
   0x0000000000400ea0 <+20>:	sub    $0x48,%rsp
=> 0x0000000000400ea4 <+24>:	mov    %rsp,%rsi
   0x0000000000400ea7 <+27>:	callq  0x401743 <read_six_numbers>
   0x0000000000400eac <+32>:	mov    %rsp,%rbp
   0x0000000000400eaf <+35>:	lea    0xc(%rsp),%r13
   0x0000000000400eb4 <+40>:	mov    $0x0,%r12d
   0x0000000000400eba <+46>:	mov    %rbp,%rbx
   0x0000000000400ebd <+49>:	mov    0xc(%rbp),%eax
   0x0000000000400ec0 <+52>:	cmp    %eax,0x0(%rbp)
   0x0000000000400ec3 <+55>:	je     0x400eca <phase_2+62>
   0x0000000000400ec5 <+57>:	callq  0x40163d <explode_bomb>
   0x0000000000400eca <+62>:	add    (%rbx),%r12d
   0x0000000000400ecd <+65>:	add    $0x4,%rbp
   0x0000000000400ed1 <+69>:	cmp    %r13,%rbp
   0x0000000000400ed4 <+72>:	jne    0x400eba <phase_2+46>
   0x0000000000400ed6 <+74>:	test   %r12d,%r12d
   0x0000000000400ed9 <+77>:	jne    0x400ee0 <phase_2+84>
   0x0000000000400edb <+79>:	callq  0x40163d <explode_bomb>
   0x0000000000400ee0 <+84>:	mov    0x28(%rsp),%rbx
   0x0000000000400ee5 <+89>:	mov    0x30(%rsp),%rbp
   0x0000000000400eea <+94>:	mov    0x38(%rsp),%r12
   0x0000000000400eef <+99>:	mov    0x40(%rsp),%r13
   0x0000000000400ef4 <+104>:	add    $0x48,%rsp
   0x0000000000400ef8 <+108>:	retq   
End of assembler dump.
0x0000000000400ea7 in phase_2 ()
0x0000000000401743 in read_six_numbers ()
* 1 process 22775  0x0000000000401743 in read_six_numbers ()
Dump of assembler code for function read_six_numbers:
=> 0x0000000000401743 <+0>:	sub    $0x18,%rsp
   0x0000000000401747 <+4>:	mov    %rsi,%rdx
   0x000000000040174a <+7>:	lea    0x4(%rsi),%rcx
   0x000000000040174e <+11>:	lea    0x14(%rsi),%rax
   0x0000000000401752 <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401757 <+20>:	lea    0x10(%rsi),%rax
   0x000000000040175b <+24>:	mov    %rax,(%rsp)
   0x000000000040175f <+28>:	lea    0xc(%rsi),%r9
   0x0000000000401763 <+32>:	lea    0x8(%rsi),%r8
   0x0000000000401767 <+36>:	mov    $0x401eb2,%esi
   0x000000000040176c <+41>:	mov    $0x0,%eax
   0x0000000000401771 <+46>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000401776 <+51>:	cmp    $0x5,%eax
   0x0000000000401779 <+54>:	jg     0x401780 <read_six_numbers+61>
   0x000000000040177b <+56>:	callq  0x40163d <explode_bomb>
   0x0000000000401780 <+61>:	add    $0x18,%rsp
   0x0000000000401784 <+65>:	retq   
End of assembler dump.
0x0000000000401747 in read_six_numbers ()
0x000000000040174a in read_six_numbers ()
0x000000000040174e in read_six_numbers ()
0x0000000000401752 in read_six_numbers ()
0x0000000000401757 in read_six_numbers ()
0x000000000040175b in read_six_numbers ()
0x000000000040175f in read_six_numbers ()
Dump of assembler code for function read_six_numbers:
   0x0000000000401743 <+0>:	sub    $0x18,%rsp
   0x0000000000401747 <+4>:	mov    %rsi,%rdx
   0x000000000040174a <+7>:	lea    0x4(%rsi),%rcx
   0x000000000040174e <+11>:	lea    0x14(%rsi),%rax
   0x0000000000401752 <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401757 <+20>:	lea    0x10(%rsi),%rax
   0x000000000040175b <+24>:	mov    %rax,(%rsp)
=> 0x000000000040175f <+28>:	lea    0xc(%rsi),%r9
   0x0000000000401763 <+32>:	lea    0x8(%rsi),%r8
   0x0000000000401767 <+36>:	mov    $0x401eb2,%esi
   0x000000000040176c <+41>:	mov    $0x0,%eax
   0x0000000000401771 <+46>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000401776 <+51>:	cmp    $0x5,%eax
   0x0000000000401779 <+54>:	jg     0x401780 <read_six_numbers+61>
   0x000000000040177b <+56>:	callq  0x40163d <explode_bomb>
   0x0000000000401780 <+61>:	add    $0x18,%rsp
   0x0000000000401784 <+65>:	retq   
End of assembler dump.
0x0000000000401763 in read_six_numbers ()
0x0000000000401767 in read_six_numbers ()
Dump of assembler code for function read_six_numbers:
   0x0000000000401743 <+0>:	sub    $0x18,%rsp
   0x0000000000401747 <+4>:	mov    %rsi,%rdx
   0x000000000040174a <+7>:	lea    0x4(%rsi),%rcx
   0x000000000040174e <+11>:	lea    0x14(%rsi),%rax
   0x0000000000401752 <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401757 <+20>:	lea    0x10(%rsi),%rax
   0x000000000040175b <+24>:	mov    %rax,(%rsp)
   0x000000000040175f <+28>:	lea    0xc(%rsi),%r9
   0x0000000000401763 <+32>:	lea    0x8(%rsi),%r8
=> 0x0000000000401767 <+36>:	mov    $0x401eb2,%esi
   0x000000000040176c <+41>:	mov    $0x0,%eax
   0x0000000000401771 <+46>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000401776 <+51>:	cmp    $0x5,%eax
   0x0000000000401779 <+54>:	jg     0x401780 <read_six_numbers+61>
   0x000000000040177b <+56>:	callq  0x40163d <explode_bomb>
   0x0000000000401780 <+61>:	add    $0x18,%rsp
   0x0000000000401784 <+65>:	retq   
End of assembler dump.
0x000000000040176c in read_six_numbers ()
0x0000000000401771 in read_six_numbers ()
Dump of assembler code for function read_six_numbers:
   0x0000000000401743 <+0>:	sub    $0x18,%rsp
   0x0000000000401747 <+4>:	mov    %rsi,%rdx
   0x000000000040174a <+7>:	lea    0x4(%rsi),%rcx
   0x000000000040174e <+11>:	lea    0x14(%rsi),%rax
   0x0000000000401752 <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401757 <+20>:	lea    0x10(%rsi),%rax
   0x000000000040175b <+24>:	mov    %rax,(%rsp)
   0x000000000040175f <+28>:	lea    0xc(%rsi),%r9
   0x0000000000401763 <+32>:	lea    0x8(%rsi),%r8
   0x0000000000401767 <+36>:	mov    $0x401eb2,%esi
   0x000000000040176c <+41>:	mov    $0x0,%eax
=> 0x0000000000401771 <+46>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000401776 <+51>:	cmp    $0x5,%eax
   0x0000000000401779 <+54>:	jg     0x401780 <read_six_numbers+61>
   0x000000000040177b <+56>:	callq  0x40163d <explode_bomb>
   0x0000000000401780 <+61>:	add    $0x18,%rsp
   0x0000000000401784 <+65>:	retq   
End of assembler dump.
0x0000000000401776 in read_six_numbers ()
Dump of assembler code for function read_six_numbers:
   0x0000000000401743 <+0>:	sub    $0x18,%rsp
   0x0000000000401747 <+4>:	mov    %rsi,%rdx
   0x000000000040174a <+7>:	lea    0x4(%rsi),%rcx
   0x000000000040174e <+11>:	lea    0x14(%rsi),%rax
   0x0000000000401752 <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401757 <+20>:	lea    0x10(%rsi),%rax
   0x000000000040175b <+24>:	mov    %rax,(%rsp)
   0x000000000040175f <+28>:	lea    0xc(%rsi),%r9
   0x0000000000401763 <+32>:	lea    0x8(%rsi),%r8
   0x0000000000401767 <+36>:	mov    $0x401eb2,%esi
   0x000000000040176c <+41>:	mov    $0x0,%eax
   0x0000000000401771 <+46>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000401776 <+51>:	cmp    $0x5,%eax
   0x0000000000401779 <+54>:	jg     0x401780 <read_six_numbers+61>
   0x000000000040177b <+56>:	callq  0x40163d <explode_bomb>
   0x0000000000401780 <+61>:	add    $0x18,%rsp
   0x0000000000401784 <+65>:	retq   
End of assembler dump.
0x0:	 <Address 0x0 out of bounds>
0x0:	 <Address 0x0 out of bounds>
0x0000000000401779 in read_six_numbers ()
0x0:	 <Address 0x0 out of bounds>
0x5:	 <Address 0x5 out of bounds>
0x000000000040177b in read_six_numbers ()
Dump of assembler code for function read_six_numbers:
   0x0000000000401743 <+0>:	sub    $0x18,%rsp
   0x0000000000401747 <+4>:	mov    %rsi,%rdx
   0x000000000040174a <+7>:	lea    0x4(%rsi),%rcx
   0x000000000040174e <+11>:	lea    0x14(%rsi),%rax
   0x0000000000401752 <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401757 <+20>:	lea    0x10(%rsi),%rax
   0x000000000040175b <+24>:	mov    %rax,(%rsp)
   0x000000000040175f <+28>:	lea    0xc(%rsi),%r9
   0x0000000000401763 <+32>:	lea    0x8(%rsi),%r8
   0x0000000000401767 <+36>:	mov    $0x401eb2,%esi
   0x000000000040176c <+41>:	mov    $0x0,%eax
   0x0000000000401771 <+46>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000401776 <+51>:	cmp    $0x5,%eax
   0x0000000000401779 <+54>:	jg     0x401780 <read_six_numbers+61>
=> 0x000000000040177b <+56>:	callq  0x40163d <explode_bomb>
   0x0000000000401780 <+61>:	add    $0x18,%rsp
   0x0000000000401784 <+65>:	retq   
End of assembler dump.

Program exited with code 010.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
#0  0x0000000000400ef9 in phase_3 ()
#1  0x0000000000400df1 in main (argc=<value optimized out>, argv=0x7fffffffdd48) at bomb.c:89
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f16 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0:	 <Address 0x0 out of bounds>
0x0:	 <Address 0x0 out of bounds>
0x0000000000400f19 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
=> 0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f1b in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
=> 0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.

Program exited with code 010.
No registers.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 14242] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Ambiguous info command "t": target, tasks, terminal, threads, tp, tracepoints, tvariables, types.
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f16 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 15029] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
0x0000000000400f0c in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
=> 0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
Undefined command: "setpi".  Try "help".
0x0000000000400f11 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
=> 0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400ab0 in __isoc99_sscanf@plt ()
Dump of assembler code for function __isoc99_sscanf@plt:
=> 0x0000000000400ab0 <+0>:	jmpq   *0x201a02(%rip)        # 0x6024b8 <__isoc99_sscanf@got.plt>
   0x0000000000400ab6 <+6>:	pushq  $0x4
   0x0000000000400abb <+11>:	jmpq   0x400a60
End of assembler dump.
Run till exit from #0  0x0000000000400ab0 in __isoc99_sscanf@plt ()
0x0000000000400f16 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x401ebe:	 "%d %d"
quit
A debugging session is active.

	Inferior 1 [process 15085] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f0c in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
=> 0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f11 in phase_3 ()
0x0000000000400f16 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x2:	 <Address 0x2 out of bounds>
0x2:	 <Address 0x2 out of bounds>
0x0000000000400f19 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
=> 0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f20 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.

Program received signal SIGSEGV, Segmentation fault.
0x000000000000000c in ?? ()
The program being debugged was signaled while in a function called from GDB.
GDB remains in the frame where the signal was received.
To change this behavior use "set unwindonsignal on".
Evaluation of the expression containing the function
(at 0x0xc) will be abandoned.
When the function is done executing, GDB will silently stop.
No function contains program counter for selected frame.
No function contains program counter for selected frame.
#0  0x000000000000000c in ?? ()
#1  <function called from gdb>
#2  0x0000000000400f20 in phase_3 ()
#3  0x0000000000400df1 in main (argc=<value optimized out>, argv=0x7fffffffdd48) at bomb.c:89
quit
A debugging session is active.

	Inferior 1 [process 15626] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
Single stepping until exit from function phase_3,
which has no line number information.

Program exited with code 010.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
0x0000000000400f16 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f19 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
=> 0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f20 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 18400] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f16 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x2:	 <Address 0x2 out of bounds>
Cannot access memory at address 0x2
0x2:	 <Address 0x2 out of bounds>
$1 = 2
0x2:	Cannot access memory at address 0x2
0x2:	Cannot access memory at address 0x2
0x0000000000400f19 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
=> 0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f20 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
$2 = 0x2
$3 = 10
0x0000000000400f25 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
=> 0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f27 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
=> 0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
$4 = 0x2
0x0000000000400f2b in phase_3 ()
0x3:	 <Address 0x3 out of bounds>
0x7fffffffdc40:	 "H\335\377\377\377\177"
$5 = 0x7fffffffdc40
$6 = 0x3
0x0000000000400f40 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
=> 0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f45 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
=> 0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f74 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
=> 0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
No symbol "eax" in current context.
$7 = 339
$8 = 140737488346184
0x0000000000400f78 in phase_3 ()
0x0000000000400f7a in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
=> 0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.

Program exited with code 010.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400efd in phase_3 ()
0x0000000000400f02 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
=> 0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f07 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
=> 0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f0c in phase_3 ()
$1 = 4202174
$2 = 0x401ebe
0x401ebe:	 "%d %d"
0x401ebe:	 "%d %d"
0x401ebe:	 U"\x25206425\x64250064\x732520\x74737561\x6f706e69\x73726577\x1b010000\xdc3b03\x1a0000\xee4c0000\xf8ffff\xef980000\x118ffff\xefb40000\x130ffff\xf0210000\x150ffff\xf0ac0000\x168ffff\xf0e90000\x188ffff\xf12a0000\x1a0ffff\xf1970000\x1b8ffff\xf2010000\x1d0ffff\xf2440000\x1e8ffff\xf2820000\x200ffff\xf2d80000\x220ffff\xf3290000\x238ffff\xf3490000\x250ffff\xf3650000\x268ffff\xf3e30000\x288ffff\xf4bf0000\x2a8ffff\xf4d70000\x2c0ffff\xf5140000\x2e8ffff\xf5550000\x308ffff\xf7650000\x340ffff\xf7870000\x358ffff\xf86b0000\x370ffff\xf8ad0000\x388ffff\xf9280000\x3a0ffff\xf9b80000\x3c8ffff"
0x401ebe:	 "%d %d"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x401ede:	 ""
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x401ebe:	 "%d %d"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x401ede:	 ""
   0x400e8c <phase_2>:	mov    %rbx,-0x20(%rsp)
   0x400e91 <phase_2+5>:	mov    %rbp,-0x18(%rsp)
   0x400e96 <phase_2+10>:	mov    %r12,-0x10(%rsp)
   0x400e9b <phase_2+15>:	mov    %r13,-0x8(%rsp)
   0x400ea0 <phase_2+20>:	sub    $0x48,%rsp
   0x400ea4 <phase_2+24>:	mov    %rsp,%rsi
   0x400ea7 <phase_2+27>:	callq  0x401743 <read_six_numbers>
   0x400eac <phase_2+32>:	mov    %rsp,%rbp
   0x400eaf <phase_2+35>:	lea    0xc(%rsp),%r13
   0x400eb4 <phase_2+40>:	mov    $0x0,%r12d
0x401ebe:	0x6425006425206425
0x401ebe:	0x25	0x64	0x20	0x25	0x64	0x0	0x25	0x64
0x401ec6:	0x20	0x25
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x401ede:	 ""
0x401edf:	 ""
0x401ee0:	 "\032"
0x401ee2:	 ""
0x401ee3:	 ""
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
=> 0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f11 in phase_3 ()
0x0000000000400f16 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f19 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
=> 0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f20 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f25 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
=> 0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
$3 = 140737488346188
$4 = 140737488346176
0x7fffffffdc40:	72
0x7fffffffdc40:	72
0x7fffffffdc4c:	3
$5 = 140737488346188
$6 = 140737488346188
0x7fffffffd591:	 ""
0x401ec3:	 ""
0x401ec3:	 ""
0x401ec3:	 ""
0x401ec4:	 "%d %s"
0x401ec3:	 ""
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ec3:	 ""
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ec3:	 ""
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x0000000000400f27 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
=> 0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f2b in phase_3 ()
0x3:	 <Address 0x3 out of bounds>
0x3:	 <Address 0x3 out of bounds>
0x3:	 <Address 0x3 out of bounds>
0x3:	Cannot access memory at address 0x3
0x3:	 <Address 0x3 out of bounds>
0x0000000000400f40 in phase_3 ()
0x0000000000400f45 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
=> 0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x153:	 <Address 0x153 out of bounds>
quit
A debugging session is active.

	Inferior 1 [process 23338] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f20 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f25 in phase_3 ()
0x0000000000400f27 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
=> 0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f2b in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
=> 0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x3:	Cannot access memory at address 0x3
0x7fffffffdc40:	72
0x7fffffffdc4c:	3
0x7fffffffdc4c:	3
0x401b60 <__dso_handle+600>:	 "2\017@"
$1 = 4201312
$2 = 0x401b60
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
=> 0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f40 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
=> 0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 6537] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f20 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f25 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
=> 0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f27 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
=> 0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x7fffffffdc40:	0x7fffffffdd48
0x7fffffffdd54:	0xffffffffffffffff
0x7fffffffdd54:	 "\377\177"
0x7fffffffdd54:	 "\377\177"
0x7fffffffdd54:	 "\377\177"
0x7fffffffdd54:	 U"翿"
0x7fffffffdd54:	 "\377\177"
0x7fffffffdd57:	 ""
0x7fffffffdd58:	 ""
0x7fffffffdd59:	 ""
0x0000000000400f2b in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
=> 0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x1:	 <Address 0x1 out of bounds>
0x0000000000400f6f in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
=> 0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
$1 = 1
warning: Unable to display strings with size 'g', using 'b' instead.
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x0000000000400f74 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
=> 0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x39e:	 <Address 0x39e out of bounds>
$2 = 926
$3 = 0x7fffffffdc48
$4 = 140737488346184
0x7fffffffdc40:	-8888
0x7fffffffdc48:	1
0x39e:	Cannot access memory at address 0x39e
0x0000000000400f78 in phase_3 ()
0x0000000000400f7a in phase_3 ()

Program exited with code 010.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x401b60 <__dso_handle+600>:	50	15	64	0	0	0	0	0
0x401b68 <__dso_handle+608>:	111	15	64	0	0	0	0	0
0x401b70 <__dso_handle+616>:	57	15	64	0
   0x401b60 <__dso_handle+600>:	xor    (%rdi),%cl
   0x401b62 <__dso_handle+602>:	add    %al,(%rax)
   0x401b65 <__dso_handle+605>:	add    %al,(%rax)
   0x401b67 <__dso_handle+607>:	add    %ch,0xf(%rdi)
   0x401b6a <__dso_handle+610>:	add    %al,(%rax)
   0x401b6d <__dso_handle+613>:	add    %al,(%rax)
   0x401b6f <__dso_handle+615>:	add    %bh,(%rcx)
   0x401b71 <__dso_handle+617>:	cmovo  (%rax),%eax
   0x401b74 <__dso_handle+620>:	add    %al,(%rax)
   0x401b76 <__dso_handle+622>:	add    %al,(%rax)
0x401b60 <__dso_handle+600>:	0x00400f32
0x401b60 <__dso_handle+600>:	 "2\017@"
0x401b60 <__dso_handle+600>:	 "2\017@"
0x401b64 <__dso_handle+604>:	 ""
0x401b65 <__dso_handle+605>:	 ""
0x401b66 <__dso_handle+606>:	 ""
0x401b67 <__dso_handle+607>:	 ""
0x401b68 <__dso_handle+608>:	 "o\017@"
0x401b6c <__dso_handle+612>:	 ""
0x401b6d <__dso_handle+613>:	 ""
0x401b6e <__dso_handle+614>:	 ""
0x401b6f <__dso_handle+615>:	 ""
0x401b60 <__dso_handle+600>:	 "2\017@"
0x401b64 <__dso_handle+604>:	 ""
0x401b65 <__dso_handle+605>:	 ""
0x401b66 <__dso_handle+606>:	 ""
0x401b67 <__dso_handle+607>:	 ""
0x401b68 <__dso_handle+608>:	 "o\017@"
0x401b6c <__dso_handle+612>:	 ""
0x401b6d <__dso_handle+613>:	 ""
0x401b6e <__dso_handle+614>:	 ""
0x401b6f <__dso_handle+615>:	 ""
0x401b70 <__dso_handle+616>:	 "9\017@"
0x401b74 <__dso_handle+620>:	 ""
0x401b75 <__dso_handle+621>:	 ""
0x401b76 <__dso_handle+622>:	 ""
0x401b77 <__dso_handle+623>:	 ""
0x401b78 <__dso_handle+624>:	 "@\017@"
0x401b7c <__dso_handle+628>:	 ""
0x401b7d <__dso_handle+629>:	 ""
0x401b7e <__dso_handle+630>:	 ""
0x401b7f <__dso_handle+631>:	 ""
0x401b60 <__dso_handle+600>:	 "2\017@"
0x401b64 <__dso_handle+604>:	 ""
0x401b65 <__dso_handle+605>:	 ""
0x401b66 <__dso_handle+606>:	 ""
0x401b67 <__dso_handle+607>:	 ""
0x401b68 <__dso_handle+608>:	 "o\017@"
0x401b6c <__dso_handle+612>:	 ""
0x401b6d <__dso_handle+613>:	 ""
0x401b6e <__dso_handle+614>:	 ""
0x401b6f <__dso_handle+615>:	 ""
0x401b70 <__dso_handle+616>:	 "9\017@"
0x401b74 <__dso_handle+620>:	 ""
0x401b75 <__dso_handle+621>:	 ""
0x401b76 <__dso_handle+622>:	 ""
0x401b77 <__dso_handle+623>:	 ""
0x401b78 <__dso_handle+624>:	 "@\017@"
0x401b7c <__dso_handle+628>:	 ""
0x401b7d <__dso_handle+629>:	 ""
0x401b7e <__dso_handle+630>:	 ""
0x401b7f <__dso_handle+631>:	 ""
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400efd in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
=> 0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
Undefined command: "nexti7".  Try "help".
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
=> 0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f20 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f25 in phase_3 ()
0x0000000000400f27 in phase_3 ()
0x0000000000400f2b in phase_3 ()
0x0000000000400f6f in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
=> 0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x1:	 <Address 0x1 out of bounds>
0x0000000000400f74 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
=> 0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x7fffffffdc40:	 "H\335\377\377\377\177"
0x7fffffffdc40:	 U"\xffffdd48翿\001\001\x400c40"
0x7fffffffdc40:	 "H\335\377\377\377\177"
0x7fffffffdc40:	 "H\335\377\377\377\177"
0x7fffffffdc47:	 ""
0x7fffffffdc48:	 "\001"
0x7fffffffdc4a:	 ""
0x7fffffffdc48:	 "\001"
0x7fffffffdc4a:	 ""
0x7fffffffdc4b:	 ""
0x7fffffffdc4c:	 "\001"
0x39e:	 <Address 0x39e out of bounds>
0x7fffffffdc40:	0x7fffffffdd48
0x7fffffffdd50:	0xffffffffffffe030
0x7fffffffdd50:	0xffffffffffffe030
0x7fffffffdd50:	0xffffffffffffe030
0x7fffffffdd50:	0x30
0x7fffffffdd50:	 "0\340\377\377\377\177"
$1 = 140737488346448
$2 = 140737488346448
0x401b60 <__dso_handle+600>:	4198194	0	4198255	0
0x401b70 <__dso_handle+616>:	4198201	0	4198208
0x401b60 <__dso_handle+600>:	4198194	0	4198255	0
0x401b70 <__dso_handle+616>:	4198201	0	4198208	0
0x401b60 <__dso_handle+600>:	4198194	0	4198255	0
0x401b70 <__dso_handle+616>:	4198201	0	4198208	0
0x401b80 <__dso_handle+632>:	4198215
0x401b60 <__dso_handle+600>:	4198194	0	4198255	0
0x401b70 <__dso_handle+616>:	4198201	0	4198208	0
0x401b80 <__dso_handle+632>:	4198215	0	4198222	0
0x401b90 <__dso_handle+648>:	4198229	0	4198236	0
0x401b60 <__dso_handle+600>:	4198194	4198255
0x401b70 <__dso_handle+616>:	4198201	4198208
0x401b80 <__dso_handle+632>:	4198215	4198222
0x401b90 <__dso_handle+648>:	4198229	4198236
0x401ba0 <array.3014>:	8589934602	30064771086
0x401bb0 <array.3014+16>:	51539607560	47244640271
0x401bc0 <array.3014+32>:	17179869184	55834574849
0x401bd0 <array.3014+48>:	38654705667	21474836486
0x401b60 <__dso_handle+600>:	4198194	4198255
0x401b70 <__dso_handle+616>:	4198201	4198208
0x401b80 <__dso_handle+632>:	4198215	4198222
0x401b90 <__dso_handle+648>:	4198229	4198236
0x401b60 <__dso_handle+600>:	4198194	0	4198255	0
0x401b70 <__dso_handle+616>:	4198201	0	4198208	0
0x401b60 <__dso_handle+600>:	50	15	64	0	0	0	0	0
0x401b60 <__dso_handle+600>:	4198194
0x401b60 <__dso_handle+600>:	4198194
0x401b68 <__dso_handle+608>:	4198255
0x401ebe:	7216174408050697253
0x401ebe:	 "%d %d"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ebe:	 U"\x25206425\x64250064\x732520\x74737561\x6f706e69\x73726577\x1b010000\xdc3b03\x1a0000\xee4c0000\xf8ffff\xef980000\x118ffff\xefb40000\x130ffff\xf0210000\x150ffff\xf0ac0000\x168ffff\xf0e90000\x188ffff\xf12a0000\x1a0ffff\xf1970000\x1b8ffff\xf2010000\x1d0ffff\xf2440000\x1e8ffff\xf2820000\x200ffff\xf2d80000\x220ffff\xf3290000\x238ffff\xf3490000\x250ffff\xf3650000\x268ffff\xf3e30000\x288ffff\xf4bf0000\x2a8ffff\xf4d70000\x2c0ffff\xf5140000\x2e8ffff\xf5550000\x308ffff\xf7650000\x340ffff\xf7870000\x358ffff\xf86b0000\x370ffff\xf8ad0000\x388ffff\xf9280000\x3a0ffff\xf9b80000\x3c8ffff"
0x401ebe:	 "%d %d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
=> 0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x40:	 <Address 0x40 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x7fffffffdc40:	 U"\xffffdd48翿\001\001\x400c40"
0x7fffffffdc48:	 U"\001\001\x400c40"
quit
A debugging session is active.

	Inferior 1 [process 13524] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
0x0000000000400efd in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
=> 0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
$1 = 3
No symbol "x" in current context.
$2 = 0x3
Size letters are meaningless in "print" command.
$3 = 3
$4 = 3
$5 = 3
0x0000000000400f02 in phase_3 ()
$6 = 3
$7 = 140737488346184
0x0000000000400f07 in phase_3 ()
$8 = 140737488346184
$9 = 140737488346188
0x7fffffffdc48:	4200045
0x7fffffffdc48:	 "m\026@"
0x7fffffffdc4c:	 ""
0x7fffffffdc4c:	 U""
0x7fffffffdc48:	 U"\x40166d"
0x7fffffffdc4c:	 U""
0x7fffffffdc50:	 U"\x400c40"
No symbol "G" in current context.
warning: Unable to display strings with size 'g', using 'b' instead.
0x7fffffffdc4c:	 ""
0x7fffffffdc4c:	 ""
0x7fffffffdc4d:	 ""
0x7fffffffdc4e:	 ""
0x7fffffffdc4f:	 ""
0x7fffffffdc50:	 "@\f@"
0x7fffffffdc54:	 ""
0x7fffffffdc55:	 ""
0x7fffffffdc56:	 ""
0x7fffffffdc48:	 "m\026@"
0x7fffffffdc4c:	 ""
0x7fffffffdc4d:	 ""
0x7fffffffdc4e:	 ""
0x7fffffffdc4f:	 ""
0x7fffffffdc50:	 "@\f@"
0x7fffffffdc54:	 ""
0x7fffffffdc55:	 ""
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
=> 0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f0c in phase_3 ()
0x7fffffffdc48:	 "m\026@"
0x7fffffffdc4c:	 ""
0x7fffffffdc4d:	 ""
0x7fffffffdc4e:	 ""
0x7fffffffdc4f:	 ""
0x7fffffffdc50:	 "@\f@"
0x7fffffffdc54:	 ""
0x7fffffffdc55:	 ""
0x7fffffffdc4c:	 ""
0x7fffffffdc4d:	 ""
0x7fffffffdc4e:	 ""
0x7fffffffdc4f:	 ""
0x7fffffffdc50:	 "@\f@"
0x7fffffffdc54:	 ""
0x7fffffffdc55:	 ""
0x7fffffffdc56:	 ""
0x0000000000400f11 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
=> 0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f16 in phase_3 ()
0x0000000000400f19 in phase_3 ()
0x0000000000400f20 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
0x1:	 <Address 0x1 out of bounds>
$10 = 1
quit
A debugging session is active.

	Inferior 1 [process 6666] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f25 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
=> 0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x1:	Cannot access memory at address 0x1
0x40:	Cannot access memory at address 0x40
0x7fffffffdc40:	-8888
0x7fffffffdc48:	1
0x7fffffffdc50:	4197440
0x7fffffffdc4c:	33
0x0000000000400f63 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
=> 0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 8402] will be killed.

Quit anyway? (y or n) Not confirmed.
0x2:	Cannot access memory at address 0x2
0x2:	Cannot access memory at address 0x2
0x2:	Cannot access memory at address 0x2
0x2:	Cannot access memory at address 0x2
quit
A debugging session is active.

	Inferior 1 [process 8402] will be killed.

Quit anyway? (y or n) Please answer y or n.
A debugging session is active.

	Inferior 1 [process 8402] will be killed.

Quit anyway? (y or n) Please answer y or n.
A debugging session is active.

	Inferior 1 [process 8402] will be killed.

Quit anyway? (y or n) EOF [assumed Y]
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400ef9

Breakpoint 1, 0x0000000000400ef9 in phase_3 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_3:
=> 0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f25 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
=> 0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
   0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f27 in phase_3 ()
Dump of assembler code for function phase_3:
   0x0000000000400ef9 <+0>:	sub    $0x18,%rsp
   0x0000000000400efd <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f02 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f07 <+14>:	mov    $0x401ebe,%esi
   0x0000000000400f0c <+19>:	mov    $0x0,%eax
   0x0000000000400f11 <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400f16 <+29>:	cmp    $0x1,%eax
   0x0000000000400f19 <+32>:	jg     0x400f20 <phase_3+39>
   0x0000000000400f1b <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000400f20 <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f25 <+44>:	ja     0x400f63 <phase_3+106>
=> 0x0000000000400f27 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f2b <+50>:	jmpq   *0x401b60(,%rax,8)
   0x0000000000400f32 <+57>:	mov    $0x217,%eax
   0x0000000000400f37 <+62>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f39 <+64>:	mov    $0xd6,%eax
   0x0000000000400f3e <+69>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f40 <+71>:	mov    $0x153,%eax
   0x0000000000400f45 <+76>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f47 <+78>:	mov    $0x77,%eax
   0x0000000000400f4c <+83>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f4e <+85>:	mov    $0x160,%eax
   0x0000000000400f53 <+90>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f55 <+92>:	mov    $0x397,%eax
   0x0000000000400f5a <+97>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f5c <+99>:	mov    $0x19c,%eax
   0x0000000000400f61 <+104>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f63 <+106>:	callq  0x40163d <explode_bomb>
   0x0000000000400f68 <+111>:	mov    $0x0,%eax
   0x0000000000400f6d <+116>:	jmp    0x400f74 <phase_3+123>
   0x0000000000400f6f <+118>:	mov    $0x39e,%eax
   0x0000000000400f74 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400f78 <+127>:	je     0x400f7f <phase_3+134>
   0x0000000000400f7a <+129>:	callq  0x40163d <explode_bomb>
   0x0000000000400f7f <+134>:	add    $0x18,%rsp
   0x0000000000400f83 <+138>:	retq   
End of assembler dump.
0x0000000000400f2b in phase_3 ()
A syntax error in expression, near `%eax'.
0x3:	Cannot access memory at address 0x3
0x3:	Cannot access memory at address 0x3
0x3:	Cannot access memory at address 0x3
0x3:	Cannot access memory at address 0x3
0x3:	 <Address 0x3 out of bounds>
0x401b78 <__dso_handle+624>:	 U"\x400f40"
0x401b78 <__dso_handle+624>:	 "@\017@"
0x401b78 <__dso_handle+624>:	 "@\017@"
0x401b7c <__dso_handle+628>:	 ""
0x401b7d <__dso_handle+629>:	 ""
0x401b7e <__dso_handle+630>:	 ""
$1 = 4201336
$2 = 0x401b78
0x401b60 <__dso_handle+600>:	0x400f32 <phase_3+57>
0x401b78 <__dso_handle+624>:	0x400f40 <phase_3+71>
quit
A debugging session is active.

	Inferior 1 [process 9571] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_4:
=> 0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fc5 in phase_4 ()
0x0000000000400fca in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
=> 0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x401ec1:	0x7325206425006425
0x401ec1:	0x7325206425006425
0x0000000000400fcf in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
=> 0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x401ec1:	0x25006425
0x401ec1:	0x7325206425006425
0x0000000000400fd4 in phase_4 ()
0x0000000000400fd9 in phase_4 ()
0x0000000000400fdc in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
=> 0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x400fe5 <phase_4+36>:	0x247c8b00000653e8
0x0:	Cannot access memory at address 0x0
0x0000000000400fe5 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
=> 0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x61:	 <Address 0x61 out of bounds>
quit
A debugging session is active.

	Inferior 1 [process 11798] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_4:
=> 0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fc5 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
=> 0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fca in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
=> 0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x401ec1:	 "%d"
0x401ec1:	 U"\x25006425\x73252064\x73756100\x706e6974\x7265776f\x1000073\xdc3b031b\x1a000000\x4c000000\xf8ffffee\x98000000\x18ffffef\xb4000001\x30ffffef\x21000001\x50fffff0\xac000001\x68fffff0\xe9000001\x88fffff0\x2a000001\xa0fffff1\x97000001\xb8fffff1\x1000001\xd0fffff2\x44000001\xe8fffff2\x82000001\xfffff2\xd8000002\x20fffff2\x29000002\x38fffff3\x49000002\x50fffff3\x65000002\x68fffff3\xe3000002\x88fffff3\xbf000002\xa8fffff4\xd7000002\xc0fffff4\x14000002\xe8fffff5\x55000002\x8fffff5\x65000003\x40fffff7\x87000003\x58fffff7\x6b000003\x70fffff8\xad000003\x88fffff8\x28000003\xa0fffff9\xb8000003\xc8fffff9\003\x14000000"
0x401ec1:	0x7325206425006425
0x401ec1:	0x25
0x401ec1:	0x25	0x64	0x0	0x25	0x64	0x20	0x25	0x73
0x401ec1:	 "%d"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x0000000000400fcf in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
=> 0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x401ec1:	 "%d"
0x401ec1:	 U"\x25006425\x73252064\x73756100\x706e6974\x7265776f\x1000073\xdc3b031b\x1a000000\x4c000000\xf8ffffee\x98000000\x18ffffef\xb4000001\x30ffffef\x21000001\x50fffff0\xac000001\x68fffff0\xe9000001\x88fffff0\x2a000001\xa0fffff1\x97000001\xb8fffff1\x1000001\xd0fffff2\x44000001\xe8fffff2\x82000001\xfffff2\xd8000002\x20fffff2\x29000002\x38fffff3\x49000002\x50fffff3\x65000002\x68fffff3\xe3000002\x88fffff3\xbf000002\xa8fffff4\xd7000002\xc0fffff4\x14000002\xe8fffff5\x55000002\x8fffff5\x65000003\x40fffff7\x87000003\x58fffff7\x6b000003\x70fffff8\xad000003\x88fffff8\x28000003\xa0fffff9\xb8000003\xc8fffff9\003\x14000000"
0x401ec1:	620782629	1931812964
0x401ec1:	25637	9472
0x401ec1:	37
0x401ec1:	37	100
0x401ec1:	37 '%'	100 'd'
0x401ec1:	37 '%'	100 'd'	0 '\000'
0x401ec1:	37 '%'	100 'd'	0 '\000'	37 '%'
0x401ec1:	37 '%'	100 'd'	0 '\000'	37 '%'	100 'd'	32 ' '
0x401ec1:	37	100	0	37	100	32
0x0000000000400fd4 in phase_4 ()
0x0000000000400fd9 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x1:	Cannot access memory at address 0x1
0x1:	 <Address 0x1 out of bounds>
0x0000000000400fdc in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
=> 0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fde in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
=> 0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x7fffffffdc4c:	0x400c4000000001
0x7fffffffdc40:	0x7fffffffdd48
0x7fffffffdc40:	 "H\335\377\377\377\177"
0x7fffffffdc40:	 "H\335\377\377\377\177"
0x7fffffffdc40:	72 'H'	-35 '\335'
0x7fffffffdc40:	72 'H'	-35 '\335'	-1 '\377'	-1 '\377'
0x0000000000400fe3 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
=> 0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fea in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fee in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
=> 0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400f84 in func4 ()
Dump of assembler code for function func4:
=> 0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 13438] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_4:
=> 0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fc5 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
=> 0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fca in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
=> 0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x401ec1:	620782629
0x401ec1:	37
0x401ec1:	37	100
0x401ec1:	37 '%'	100 'd'
0x401ec1:	37 '%'	100 'd'	0 '\000'
0x401ec1:	37 '%'	100 'd'	0 '\000'	37 '%'
0x401ec1:	37 '%'	100 'd'	0 '\000'	37 '%'	100 'd'	32 ' '
0x401ec1:	 "%d"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x401ede:	 ""
0x603030 <input_strings+240>:	 U"1"
0x0000000000400fcf in phase_4 ()
0x401ec1:	 U"\x25006425\x73252064\x73756100\x706e6974\x7265776f\x1000073\xdc3b031b\x1a000000\x4c000000\xf8ffffee\x98000000\x18ffffef\xb4000001\x30ffffef\x21000001\x50fffff0\xac000001\x68fffff0\xe9000001\x88fffff0\x2a000001\xa0fffff1\x97000001\xb8fffff1\x1000001\xd0fffff2\x44000001\xe8fffff2\x82000001\xfffff2\xd8000002\x20fffff2\x29000002\x38fffff3\x49000002\x50fffff3\x65000002\x68fffff3\xe3000002\x88fffff3\xbf000002\xa8fffff4\xd7000002\xc0fffff4\x14000002\xe8fffff5\x55000002\x8fffff5\x65000003\x40fffff7\x87000003\x58fffff7\x6b000003\x70fffff8\xad000003\x88fffff8\x28000003\xa0fffff9\xb8000003\xc8fffff9\003\x14000000"
0x401ec1:	 "%d"
0x401ec1:	 "%d"
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
=> 0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fd4 in phase_4 ()
0x0000000000400fd9 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x1:	 <Address 0x1 out of bounds>
0x0000000000400fdc in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
=> 0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fde in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
=> 0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
eflags         0x246	[ PF ZF IF ]
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fde	0x400fde <phase_4+29>
eflags         0x246	[ PF ZF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
$1 = [ PF ZF IF ]
0x0000000000400fe3 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
=> 0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fea in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fea	0x400fea <phase_4+41>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fee in phase_4 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fee	0x400fee <phase_4+45>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
=> 0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400f84 in func4 ()
0x0000000000400f89 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
=> 0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f8e in func4 ()
0x0000000000400f92 in func4 ()
0x0000000000400f94 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
=> 0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x1	1
rcx            0x40	64
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f94	0x400f94 <func4+16>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f99 in func4 ()
rax            0x1	1
rbx            0x1	1
rcx            0x40	64
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f99	0x400f99 <func4+21>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
=> 0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f9c in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
=> 0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400fb2 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
=> 0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x1	1
rcx            0x40	64
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fb2	0x400fb2 <func4+46>
eflags         0x246	[ PF ZF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fb7 in func4 ()
0x0000000000400fbc in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
=> 0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
No symbol table info available.
0x0000000000400fc0 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
=> 0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc38	0x7fffffffdc38
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fc0	0x400fc0 <func4+60>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400ff3 in phase_4 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400ff3	0x400ff3 <phase_4+50>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
=> 0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 1821] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_4:
=> 0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fc5 in phase_4 ()
0x0000000000400fca in phase_4 ()
0x0000000000400fcf in phase_4 ()
0x0000000000400fd4 in phase_4 ()
0x0000000000400fd9 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
No symbol table info available.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fd9	0x400fd9 <phase_4+24>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
quit
A debugging session is active.

	Inferior 1 [process 12548] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
rax            0x603030	6303792
rbx            0x7fffffffdd48	140737488346440
rcx            0x7	7
rdx            0x4	4
rsi            0x603030	6303792
rdi            0x603030	6303792
rbp            0x0	0x0
rsp            0x7fffffffdc58	0x7fffffffdc58
r8             0x1	1
r9             0x0	0
r10            0x5	5
r11            0x246	582
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fc1	0x400fc1 <phase_4>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fc5 in phase_4 ()
0x0000000000400fca in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
=> 0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fcf in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
=> 0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fd4 in phase_4 ()
0x0000000000400fd9 in phase_4 ()
0x0000000000400fdc in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
=> 0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fde in phase_4 ()
0x0000000000400fe3 in phase_4 ()
0x0000000000400fea in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fea	0x400fea <phase_4+41>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fee in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
=> 0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400f84 in func4 ()
Dump of assembler code for function func4:
=> 0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc38	0x7fffffffdc38
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f84	0x400f84 <func4>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
=> 0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f89 in func4 ()
0x0000000000400f8e in func4 ()
0x0000000000400f92 in func4 ()
0x0000000000400f94 in func4 ()
0x0000000000400f99 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
=> 0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f99	0x400f99 <func4+21>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f9c in func4 ()
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f9c	0x400f9c <func4+24>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
=> 0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f9e in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
=> 0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400fa1 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
=> 0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fa1	0x400fa1 <func4+29>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fa6 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
=> 0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fa6	0x400fa6 <func4+34>
eflags         0x206	[ PF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fa8 in func4 ()
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x1	0x1
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fa8	0x400fa8 <func4+36>
eflags         0x206	[ PF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fab in func4 ()
0x0000000000400fb0 in func4 ()
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x0	0
rbp            0x1	0x1
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fb0	0x400fb0 <func4+44>
eflags         0x206	[ PF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
=> 0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x0	0
rbp            0x1	0x1
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fb0	0x400fb0 <func4+44>
eflags         0x206	[ PF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fb2 in func4 ()
rax            0x2	2
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x0	0
rbp            0x1	0x1
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fb2	0x400fb2 <func4+46>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fb7 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
=> 0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 13384] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
No symbol table info available.
Dump of assembler code for function phase_4:
=> 0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fc5 in phase_4 ()
0x0000000000400fca in phase_4 ()
0x0000000000400fcf in phase_4 ()
0x0000000000400fd4 in phase_4 ()
0x0000000000400fd9 in phase_4 ()
0x0000000000400fdc in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
=> 0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fde in phase_4 ()
0x0000000000400fe3 in phase_4 ()
0x0000000000400fea in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fea	0x400fea <phase_4+41>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fee in phase_4 ()
0x0000000000400ff3 in phase_4 ()
0x0000000000400ff6 in phase_4 ()
quit
A debugging session is active.

	Inferior 1 [process 27472] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
0x0000000000400fea in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fee in phase_4 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fee	0x400fee <phase_4+45>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f84 in func4 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc38	0x7fffffffdc38
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f84	0x400f84 <func4>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
=> 0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f89 in func4 ()
0x0000000000400f8e in func4 ()
0x0000000000400f92 in func4 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f92	0x400f92 <func4+14>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f94 in func4 ()
0x0000000000400f99 in func4 ()
0x0000000000400f9c in func4 ()
0x0000000000400f9e in func4 ()
0x0000000000400fa1 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
=> 0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f84 in func4 ()
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc18	0x7fffffffdc18
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f84	0x400f84 <func4>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
=> 0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc18	0x7fffffffdc18
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f84	0x400f84 <func4>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f89 in func4 ()
0x0000000000400f8e in func4 ()
0x0000000000400f92 in func4 ()
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc00	0x7fffffffdc00
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f92	0x400f92 <func4+14>
eflags         0x206	[ PF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
=> 0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
=> 0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
=> 0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
=> 0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 31503] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_4:
=> 0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
Stack level 0, frame at 0x7fffffffdc60:
 rip = 0x400fc1 in phase_4; saved rip 0x400e0d
 called by frame at 0x7fffffffdc70
 Arglist at 0x7fffffffdc50, args: 
 Locals at 0x7fffffffdc50, Previous frame's sp is 0x7fffffffdc60
 Saved registers:
  rip at 0x7fffffffdc58
$1 = 140737488346192
$2 = 0x7fffffffdc50
0x7fffffffdc50:	 "@\f@"
0x7fffffffdc50:	 "@\f@"
0x7fffffffdc50:	 "@\f@"
0x7fffffffdc54:	 ""
0x7fffffffdc50:	 "@\f@"
0x7fffffffdc54:	 ""
0x7fffffffdc55:	 ""
0x7fffffffdc50:	 U"\x400c40"
0x7fffffffdc58:	 U"\x400e0d"
0x7fffffffdc60:	 U""
0x0000000000400fc5 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
=> 0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fca in phase_4 ()
0x401ec1:	 "%d"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x0000000000400fcf in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
=> 0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x401ec1:	 "%d"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ec1:	 "%d"
0x401ec4:	 "%d %s"
0x401eca:	 "austinpowers"
0x401ed7:	 ""
0x401ed8:	 "\001\033\003;", <incomplete sequence \334>
0x0000000000400fd4 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
=> 0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400ab0 in __isoc99_sscanf@plt ()
Dump of assembler code for function __isoc99_sscanf@plt:
=> 0x0000000000400ab0 <+0>:	jmpq   *0x201a02(%rip)        # 0x6024b8 <__isoc99_sscanf@got.plt>
   0x0000000000400ab6 <+6>:	pushq  $0x4
   0x0000000000400abb <+11>:	jmpq   0x400a60
End of assembler dump.
Run till exit from #0  0x0000000000400ab0 in __isoc99_sscanf@plt ()
0x0000000000400fd9 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fd9	0x400fd9 <phase_4+24>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fdc in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
=> 0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fde in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
=> 0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fde	0x400fde <phase_4+29>
eflags         0x246	[ PF ZF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x7fffffffdc40:	 "H\335\377\377\377\177"
0x7fffffffdc4c:	 "\002"
0x7fffffffdc4c:	 U"\002\x400c40"
0x7fffffffdc4c:	 "\002"
0x7fffffffdc4c:	 "\002"
0x7fffffffdc4c:	 "\002"
0x7fffffffdc4e:	 ""
0x7fffffffdc4f:	 ""
0x7fffffffdc50:	 "@\f@"
0x0000000000400fe3 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
=> 0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fea in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fee in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
=> 0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x2:	 <Address 0x2 out of bounds>
0x2:	 <Address 0x2 out of bounds>
0x2:	 <Address 0x2 out of bounds>
0x7fffffffdc40:	 "H\335\377\377\377\177"
0x7fffffffdc4c:	 "\002"
0x0000000000400f84 in func4 ()
Dump of assembler code for function func4:
=> 0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc38	0x7fffffffdc38
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f84	0x400f84 <func4>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f89 in func4 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc38	0x7fffffffdc38
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f89	0x400f89 <func4+5>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f8e in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
=> 0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc38	0x7fffffffdc38
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f8e	0x400f8e <func4+10>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f92 in func4 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f92	0x400f92 <func4+14>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
=> 0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f94 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
=> 0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f99 in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
=> 0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
Undefined command: "registers".  Try "help".
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f99	0x400f99 <func4+21>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f9c in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
=> 0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f9e in func4 ()
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
=> 0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x2	2
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f9e	0x400f9e <func4+26>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400fa1 in func4 ()
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc20	0x7fffffffdc20
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400fa1	0x400fa1 <func4+29>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
   0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
=> 0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f84 in func4 ()
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc18	0x7fffffffdc18
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f84	0x400f84 <func4>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400f89 in func4 ()
rax            0x1	1
rbx            0x2	2
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc18	0x7fffffffdc18
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400f89	0x400f89 <func4+5>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
=> 0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:	mov    %rbx,-0x10(%rsp)
=> 0x0000000000400f89 <+5>:	mov    %rbp,-0x8(%rsp)
   0x0000000000400f8e <+10>:	sub    $0x18,%rsp
   0x0000000000400f92 <+14>:	mov    %edi,%ebx
   0x0000000000400f94 <+16>:	mov    $0x1,%eax
   0x0000000000400f99 <+21>:	cmp    $0x1,%edi
   0x0000000000400f9c <+24>:	jle    0x400fb2 <func4+46>
   0x0000000000400f9e <+26>:	lea    -0x1(%rbx),%edi
   0x0000000000400fa1 <+29>:	callq  0x400f84 <func4>
   0x0000000000400fa6 <+34>:	mov    %eax,%ebp
   0x0000000000400fa8 <+36>:	lea    -0x2(%rbx),%edi
   0x0000000000400fab <+39>:	callq  0x400f84 <func4>
   0x0000000000400fb0 <+44>:	add    %ebp,%eax
   0x0000000000400fb2 <+46>:	mov    0x8(%rsp),%rbx
   0x0000000000400fb7 <+51>:	mov    0x10(%rsp),%rbp
   0x0000000000400fbc <+56>:	add    $0x18,%rsp
   0x0000000000400fc0 <+60>:	retq   
End of assembler dump.
0x0000000000400f8e in func4 ()
0x0000000000400f92 in func4 ()
0x0000000000400f94 in func4 ()
0x0000000000400f99 in func4 ()
0x0000000000400f9c in func4 ()
0x0000000000400fb2 in func4 ()
0x0000000000400fb7 in func4 ()
0x0000000000400fbc in func4 ()
0x0000000000400fc0 in func4 ()
0x0000000000400fa6 in func4 ()
0x0000000000400fa8 in func4 ()
0x0000000000400fab in func4 ()
0x0000000000400fb0 in func4 ()
0x0000000000400fb2 in func4 ()
0x0000000000400fb7 in func4 ()
0x0000000000400fbc in func4 ()
0x0000000000400fc0 in func4 ()
0x0000000000400ff3 in phase_4 ()
0x0000000000400ff6 in phase_4 ()
0x0000000000400ff8 in phase_4 ()

Program exited with code 010.
No frame selected.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_4:
=> 0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
quit
A debugging session is active.

	Inferior 1 [process 5766] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
0x0000000000400fc5 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
=> 0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fca in phase_4 ()
0x0000000000400fcf in phase_4 ()
0x0000000000400fd4 in phase_4 ()
0x0000000000400fd9 in phase_4 ()
0x0000000000400fdc in phase_4 ()
0x0000000000400fde in phase_4 ()
0x0000000000400fe3 in phase_4 ()
0x0000000000400fea in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400fee in phase_4 ()
0x0000000000400ff3 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
=> 0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
rax            0xd	13
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x6	6
rsi            0x401ec3	4202179
rdi            0x0	0
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400ff3	0x400ff3 <phase_4+50>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
quit
A debugging session is active.

	Inferior 1 [process 15113] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x400fc1

Breakpoint 1, 0x0000000000400fc1 in phase_4 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
0x0000000000400fea in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
=> 0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
   0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
0x0000000000400ff6 in phase_4 ()
Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:	sub    $0x18,%rsp
   0x0000000000400fc5 <+4>:	lea    0xc(%rsp),%rdx
   0x0000000000400fca <+9>:	mov    $0x401ec1,%esi
   0x0000000000400fcf <+14>:	mov    $0x0,%eax
   0x0000000000400fd4 <+19>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:	cmp    $0x1,%eax
   0x0000000000400fdc <+27>:	jne    0x400fe5 <phase_4+36>
   0x0000000000400fde <+29>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000400fe3 <+34>:	jg     0x400fea <phase_4+41>
   0x0000000000400fe5 <+36>:	callq  0x40163d <explode_bomb>
   0x0000000000400fea <+41>:	mov    0xc(%rsp),%edi
   0x0000000000400fee <+45>:	callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:	cmp    $0x37,%eax
=> 0x0000000000400ff6 <+53>:	je     0x400ffd <phase_4+60>
   0x0000000000400ff8 <+55>:	callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:	add    $0x18,%rsp
   0x0000000000401001 <+64>:	retq   
End of assembler dump.
rax            0x37	55
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x9	9
rsi            0x401ec3	4202179
rdi            0x1	1
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x1	1
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x400ff6	0x400ff6 <phase_4+53>
eflags         0x246	[ PF ZF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000400ffd in phase_4 ()
0x0000000000401001 in phase_4 ()
main (argc=<value optimized out>, argv=0x7fffffffdd48) at bomb.c:96
96	    phase_defused();
quit
A debugging session is active.

	Inferior 1 [process 16249] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_5:
=> 0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401006 in phase_5 ()
0x000000000040100b in phase_5 ()
Stack level 0, frame at 0x7fffffffdc60:
 rip = 0x40100b in phase_5; saved rip 0x400e29
 called by frame at 0x7fffffffdc70
 Arglist at 0x7fffffffdc38, args: 
 Locals at 0x7fffffffdc38, Previous frame's sp is 0x7fffffffdc60
 Saved registers:
  rip at 0x7fffffffdc58
0x401ebe:	7216174408050697253
0x401ebe:	7216174408050697253	8391179590201189664
0x401ebe:	622879781	1680146532
0x401ebe:	37
0x401ebe:	37	100	32	37
0x0000000000401010 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
=> 0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401015 in phase_5 ()
$1 = 0x401ebe
$2 = Value can't be converted to integer.
Value can't be converted to integer.
0x401ebe:	0x25206425
0x401ebe:	0x25
0x401ebe:	0x6425006425206425
0x401ebe:	0x25
0x401ebe:	0x25	0x64	0x20	0x25
No symbol "eax" in current context.
rax            0x603080	6303872
rbx            0x7fffffffdd48	140737488346440
rcx            0x7fffffffdc48	140737488346184
rdx            0x7fffffffdc4c	140737488346188
rsi            0x401ebe	4202174
rdi            0x603080	6303872
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x1	1
r9             0x0	0
r10            0x6f20736968742079	8007527034025943161
r11            0x246	582
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401015	0x401015 <phase_5+19>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
=> 0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x401ebe:	0x25206425
0x401ebe:	0x25
0x401ebe:	0x25206425
0x401ebe:	0x6425
0x603080 <input_strings+320>:	0x00000061
0x603084 <input_strings+324>:	0
0x401ebe:	622879781
0x401ebe:	37
0x401ebe:	37	100
0x401ebe:	37	100	32
0x401ebe:	37	100	32	37
0x401ebe:	37	100	32	37	100
0x401ebe:	37	100	32	37	100	0	37	100
0x000000000040101a in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
=> 0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
=> 0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x000000000040101f in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
=> 0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
rax            0x0	0
rbx            0x7fffffffdd48	140737488346440
rcx            0x0	0
rdx            0x603080	6303872
rsi            0x61	97
rdi            0x7fffffffda40	140737488345664
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x0	0
r9             0x0	0
r10            0xffffffff	4294967295
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x40101f	0x40101f <phase_5+29>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
rax            0x0	0
rbx            0x7fffffffdd48	140737488346440
rcx            0x0	0
rdx            0x603080	6303872
rsi            0x61	97
rdi            0x7fffffffda40	140737488345664
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x0	0
r9             0x0	0
r10            0xffffffff	4294967295
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x40101f	0x40101f <phase_5+29>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000401022 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
=> 0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401024 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
=> 0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
rax            0x0	0
rbx            0x7fffffffdd48	140737488346440
rcx            0x0	0
rdx            0x603080	6303872
rsi            0x61	97
rdi            0x7fffffffda40	140737488345664
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x0	0
r9             0x0	0
r10            0xffffffff	4294967295
r11            0x1	1
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401024	0x401024 <phase_5+34>
eflags         0x297	[ CF PF AF SF IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
=> 0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
Undefined command: "nextis".  Try "help".

Program exited with code 010.
quit
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
0x0000000000401006 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
=> 0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x000000000040100b in phase_5 ()
0x0000000000401010 in phase_5 ()
0x0000000000401015 in phase_5 ()
0x000000000040101a in phase_5 ()
0x000000000040101f in phase_5 ()
0x0000000000401022 in phase_5 ()
0x0000000000401029 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
rax            0x2	2
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401029	0x401029 <phase_5+39>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
=> 0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
rax            0x2	2
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401029	0x401029 <phase_5+39>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x000000000040102d in phase_5 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x40102d	0x40102d <phase_5+43>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
=> 0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x40102d	0x40102d <phase_5+43>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000401030 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
=> 0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401030	0x401030 <phase_5+46>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000401034 in phase_5 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x40	64
rdx            0x2	2
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401034	0x401034 <phase_5+50>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
=> 0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401037 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
=> 0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401039 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
=> 0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401046 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
=> 0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x0	0
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401046	0x401046 <phase_5+68>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000401048 in phase_5 ()
rax            0x1	1
rbx            0x7fffffffdd48	140737488346440
rcx            0x0	0
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401048	0x401048 <phase_5+70>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
=> 0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x000000000040104f in phase_5 ()
0x401ba0 <array.3014>:	10
0x401ba0 <array.3014>:	10	0
0x401ba0 <array.3014>:	10	0	0
0x401ba0 <array.3014>:	10	0	0	0	2	0	0	0
0x401ba8 <array.3014+8>:	14	0
0x401ba0 <array.3014>:	10	2	14	7
0x401bb0 <array.3014+16>:	8	12	15	11
0x401bc0 <array.3014+32>:	0	4
rax            0x2	2
rbx            0x7fffffffdd48	140737488346440
rcx            0x0	0
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x40104f	0x40104f <phase_5+77>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
=> 0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401051 in phase_5 ()
rax            0x2	2
rbx            0x7fffffffdd48	140737488346440
rcx            0x2	2
rdx            0x1	1
rsi            0x401ec3	4202179
rdi            0x7fffffffd591	140737488344465
rbp            0x0	0x0
rsp            0x7fffffffdc40	0x7fffffffdc40
r8             0x302a18e580	206864704896
r9             0x100	256
r10            0x3	3
r11            0x3	3
r12            0x400c40	4197440
r13            0x7fffffffdd40	140737488346432
r14            0x0	0
r15            0x0	0
rip            0x401051	0x401051 <phase_5+79>
eflags         0x202	[ IF ]
cs             0xe033	57395
ss             0xe02b	57387
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x0000000000401054 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
=> 0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401043 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
=> 0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401046 in phase_5 ()
0x0000000000401048 in phase_5 ()
0x000000000040104f in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
=> 0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
0x0000000000401051 in phase_5 ()
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
=> 0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
1: x/i $pc
=> 0x401051 <phase_5+79>:	cmp    $0xf,%eax
0x0000000000401054 in phase_5 ()
1: x/i $pc
=> 0x401054 <phase_5+82>:	jne    0x401043 <phase_5+65>
0x0000000000401043 in phase_5 ()
1: x/i $pc
=> 0x401043 <phase_5+65>:	add    $0x1,%edx
No symbol "disas" in current context.
2: x/3i $pc
=> 0x401043 <phase_5+65>:	add    $0x1,%edx
   0x401046 <phase_5+68>:	cltq   
   0x401048 <phase_5+70>:	mov    0x401ba0(,%rax,4),%eax
3: x/10i $pc
=> 0x401043 <phase_5+65>:	add    $0x1,%edx
   0x401046 <phase_5+68>:	cltq   
   0x401048 <phase_5+70>:	mov    0x401ba0(,%rax,4),%eax
   0x40104f <phase_5+77>:	add    %eax,%ecx
   0x401051 <phase_5+79>:	cmp    $0xf,%eax
   0x401054 <phase_5+82>:	jne    0x401043 <phase_5+65>
   0x401056 <phase_5+84>:	mov    %eax,0xc(%rsp)
   0x40105a <phase_5+88>:	cmp    $0xc,%edx
   0x40105d <phase_5+91>:	jne    0x401065 <phase_5+99>
   0x40105f <phase_5+93>:	cmp    0x8(%rsp),%ecx
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
=> 0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
Dump of assembler code for function phase_5:
   0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
=> 0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
Dump of assembler code for function phase_5:
=> 0x0000000000401002 <+0>:	sub    $0x18,%rsp
   0x0000000000401006 <+4>:	lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:	mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:	mov    $0x0,%eax
   0x000000000040101a <+24>:	callq  0x400ab0 <__isoc99_sscanf@plt>
   0x000000000040101f <+29>:	cmp    $0x1,%eax
   0x0000000000401022 <+32>:	jg     0x401029 <phase_5+39>
   0x0000000000401024 <+34>:	callq  0x40163d <explode_bomb>
   0x0000000000401029 <+39>:	mov    0xc(%rsp),%eax
   0x000000000040102d <+43>:	and    $0xf,%eax
   0x0000000000401030 <+46>:	mov    %eax,0xc(%rsp)
   0x0000000000401034 <+50>:	cmp    $0xf,%eax
   0x0000000000401037 <+53>:	je     0x401065 <phase_5+99>
   0x0000000000401039 <+55>:	mov    $0x0,%ecx
   0x000000000040103e <+60>:	mov    $0x0,%edx
   0x0000000000401043 <+65>:	add    $0x1,%edx
   0x0000000000401046 <+68>:	cltq   
   0x0000000000401048 <+70>:	mov    0x401ba0(,%rax,4),%eax
   0x000000000040104f <+77>:	add    %eax,%ecx
   0x0000000000401051 <+79>:	cmp    $0xf,%eax
   0x0000000000401054 <+82>:	jne    0x401043 <phase_5+65>
   0x0000000000401056 <+84>:	mov    %eax,0xc(%rsp)
   0x000000000040105a <+88>:	cmp    $0xc,%edx
   0x000000000040105d <+91>:	jne    0x401065 <phase_5+99>
   0x000000000040105f <+93>:	cmp    0x8(%rsp),%ecx
   0x0000000000401063 <+97>:	je     0x40106a <phase_5+104>
   0x0000000000401065 <+99>:	callq  0x40163d <explode_bomb>
   0x000000000040106a <+104>:	add    $0x18,%rsp
   0x000000000040106e <+108>:	retq   
End of assembler dump.
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6.x86_64
quit
A debugging session is active.

	Inferior 1 [process 18315] will be killed.

Quit anyway? (y or n) Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x401002

Breakpoint 1, 0x0000000000401002 in phase_5 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x4010d9

Program received signal SIGINT, Interrupt.
0x0000003029edb730 in __read_nocancel () from /lib64/libc.so.6
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x4010d9

Breakpoint 1, 0x00000000004010d9 in phase_6 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x4010d9

Breakpoint 1, 0x00000000004010d9 in phase_6 ()
Reading symbols from /home/chenzongzhi/new/git/coursera/csapp/course-materials/lab2/bomb...done.
Breakpoint 1 at 0x4010d9

Breakpoint 1, 0x00000000004010d9 in phase_6 ()
